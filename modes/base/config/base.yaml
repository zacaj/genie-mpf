#config_version=5
mode:
    start_events: ball_starting
    priority: 100
    #code: Base.Base
#variable_player:
#    mode_base_started:
#        bonus: 
#            int: current_player.heldBonus if current_player.heldBonus>0  else 1
#            action: set
#        scoreBonus: 
#           int: 0
#           action: set
#        whiteDrops: 
#            int: 0
#            action: set
#        advX:
#            int: 1
#            action: set
#        bonus_multiplier:
#            int: 1
#            action: set
#        redDown:
#            int: 0
#            action: set
#        whiteDown:
#            int: 0
#            action: set
#        heldBonus:
#            int: 0
#            action: set
#    standup10_active:
#        tens: 1
#    lowerPop_active:
#        thousands: 2
#        spinner:
#            int: 1 if current_player.spinner==0 else 0
#            action: set
#    upperPop_active:
#        hundreds: 1
#        spinner:
#            int: 1 if current_player.spinner==0 else 0
#            action: set
#    player_redDown{value>0 and (current_player.whiteDown>0)}:
#        advX: 
#            int: 1
#            action: set
#    player_whiteDown{value>0 and (current_player.redDown>0)}:
#        advX: 
#            int: 1
#            action: set
#    drop_yellow{current_player.advX==0}:
#        bonus: 1
#    drop_yellow{current_player.advX==1}:
#        bonus_multiplier: 1
#        advX: 
#            int: 0
#            action: set
#        redDown:
#            int: 0
#            action: set
#        whiteDown:
#            int: 0
#            action: set
#    drop_red:
#        thousands: 2
#        bonus: 1
#        redDown: 1
#    drop_white:
#        whiteDown: 1
#        thousands: 2
#        bonus: 1
#    drop_white{current_player.whiteDrops==1}:
#        thousands: 3
#        bonus: 2
#    drop_yellow:
#        thousands: 2
#    advBonus_active:
#        hundreds: 5
#        bonus: 1
#    dangerLane_active:
#        thousands: 3
#    outlane_active:
#        thousands: 10
#    spinner_active{current_player.spinner and current_player.superSpinner==0}:
#        bonus: 5
#        spinner:
#            int: 0
#            action: set
#    spinner_active{current_player.superSpinner==1}:
#        bonus: 1
#    spinner_active{current_player.superSpinner==0}:
#        hundreds: 1
#
#    drop_target_bank_yellow_down:
#        scoreBonus:
#            int: 1
#            action: set
#        thousands: 5
#    drop_target_bank_yellow_down{current_player.heldBonus==0}:
#        heldBonus: current_player.bonus
#    #    heldBonusX: current_player.bonus_multiplier
#    drop_target_bank_red_down:
#        special: 1
#        scoreBonus:
#            int: 1
#            action: set
#        whiteDrops:
#            int: 1
#            action: set
#        thousands: 5
#    drop_target_bank_white_down:
#        rightEb: 1
#        scoreBonus:
#            int: 1
#            action: set
#        thousands: 5
#    special_active{current_player.special>0}:
#        score: 200000
#        special: -1
#    rightEb_active{current_player.rightEb>0}:
#        score: 50000
#        rightEb: -1
#    leftEb_active{current_player.leftEb>0}:
#        score: 100000
#        leftEb: -1
#
#    player_bonus{current_player.bonus>29}:
#        bonus:
#            int: 29
#            action: set
#        thousands: 5
#    #player_bonus{value%2==0}:
#    #    spinner:
#    #        int: 0
#    #        action: set
#    #player_bonus{value%2!=0}:
#    #    spinner:
#    #        int: 1
#    #        action: set     
#
#    inlane_active:
#        superSpinner:
#            int: 1
#            action: set 
#    timer_spinner_complete:
#        superSpinner:
#            int: 0
#            action: set
#
#    sw_lane_active:
#        bonus: 1   
#    laneA_active{current_player.a==1}:
#        thousands: 5
#    laneB_active{current_player.b==1}:
#        thousands: 5
#    laneC_active{current_player.c==1}:
#        thousands: 5
#    laneD_active{current_player.d==1}:
#        thousands: 5
#    laneA_active{current_player.a==0}:
#        hundreds: 5
#    laneB_active{current_player.b==0}:
#        hundreds: 5
#    laneC_active{current_player.c==0}:
#        hundreds: 5
#    laneD_active{current_player.d==0}:
#        hundreds: 5
#    laneA_active:
#        a:
#            int: 0
#            action: set   
#    laneB_active:
#        b:
#            int: 0
#            action: set   
#    laneC_active:
#        c:
#            int: 0
#            action: set   
#    laneD_active:
#        d:
#            int: 0
#            action: set  
#    lanesComplete:
#        a:
#            int: 1
#            action: set      
#        b:
#            int: 1
#            action: set      
#        c:
#            int: 1
#            action: set      
#        d:
#            int: 1
#            action: set 
#        leftEb: 1
#    
#    #player_bonus:
#    #    scoreBonus:
#    #        int: 0
#    #        action: set
#    #player_bonus{(value>=10 and value<20) or value==39}:
#    #    scoreBonus:
#    #        int: 1
#    #        action: set
#
#    timer_bonus_tick{current_player.bonus>0}:
#        bonus: -1
#        thousands: 1*current_player.bonus_multiplier
#    #balldevice_bd_eject_ball_eject_success:
#    #    scoreBonus:
#    #        action: set
#    #        int: 0
#    ejectBall:
#        thousands: 3
#    bonusDone{current_player.heldBonus==0}:
#        bonus:
#            int: 1
#            action: set
#    bonusDone{current_player.heldBonus>0}:
#        bonus:
#            int: current_player.heldBonus
#            action: set
#        heldBonus:
#            int: 0
#            action: set
#
#    startBonus:
#        collecting:
#            int: 1
#            action: set
#    scoreBonus:
#        collecting:
#            int: 1
#            action: set
#        scoreBonus:
#            int: 0
#            action: set
#    bonusDone:
#        collecting:
#            int: 0
#            action: set
#
#    timer_score_tick{current_player.thousands>0}:
#        thousands: -1
#        score: 1000
#    timer_score_tick{current_player.hundreds>0}:
#        hundreds: -1
#        score: 100
#    timer_score_tick{current_player.tens>0}:
#        tens: -1
#        score: 10
#    tens{value>5 and change>0}:
#        tens: 5-current_player.tens
#        score: 10*(current_player.tens-5)
#    hundreds{value>5 and change>0}:
#        tens: 5-current_player.hundreds
#        score: 100*(current_player.hundreds-5)
#    thousands{value>5 and change>0}:
#        tens: 5-current_player.thousands
#        score: 1000*(current_player.thousands-5)
#
#    
#
#event_player:
#    drop_target_yellow1_down:
#      - drop_yellow
#    drop_target_yellow2_down:
#      - drop_yellow
#    drop_target_yellow3_down:
#      - drop_yellow
#    drop_target_yellow4_down:
#      - drop_yellow
#    drop_target_red1_down:
#      - drop_red
#    drop_target_red3_down:
#      - drop_red
#    drop_target_red5_down:
#      - drop_red
#    drop_target_red7_down:
#      - drop_red
#    drop_target_white2_down:
#      - drop_white
#    drop_target_white4_down:
#      - drop_white
#    drop_target_white6_down:
#      - drop_white
#    rightEb_active:
#      - advBonus_active
#    leftEb_active:
#      - advBonus_active
#    special_active:
#      - advBonus_active
#    inlane_active:
#      - advBonus_active
#    timer_bonus_tick{current_player.bonus==0}:
#      - bonusDone
#    balldevice_bd_eject_ball_enter{current_player.scoreBonus==1}:
#      - scoreBonus
#    balldevice_bd_eject_ball_enter{current_player.scoreBonus==0}:
#      - ejectBall
#    mode_base_started:
#        player_bonus:  
#            value:
#                value: 1*current_player.bonus
#                type: int
#    ball_device_bd_outhole_ball_eject_success:
#        player_bonus:  
#            value:
#                value: 1*current_player.bonus
#                type: int
#        player_bonus_multiplier:
#            value:
#                value: 1*current_player.bonus_multiplier
#                type: int
#
light_player:
    "{current_player.spinner==1 and current_player.collecting==0}":
        spinner: on
    "{current_player.a==1}":
        laneA: on
    "{current_player.b==1}":
        laneB: on
    "{current_player.c==1}":
        laneC: on
    "{current_player.d==1}":
        laneD: on
    "{current_player.scoreBonus==1}":
        collectBonus: on    
    "{current_player.advX==1}":
        advMultiplier: on
    "{current_player.whiteDrops==1}":
        whiteDrops: on
    "{current_player.special>0}":
        special: on
    "{current_player.leftEb>0}":
        leftEb: on
    "{current_player.rightEb>0}":
        rightEb: on

    player_bonus:
        bonus: off
    player_bonus{value%10>=1}:
        bonus1k: on
    player_bonus{value%10>=2}:
        bonus2k: on
    player_bonus{value%10>=3}:
        bonus3k: on
    player_bonus{value%10>=4}:
        bonus4k: on
    player_bonus{value%10>=5}:
        bonus5k: on
    player_bonus{value%10>=6}:
        bonus6k: on
    player_bonus{value%10>=7}:
        bonus7k: on
    player_bonus{value%10>=8}:
        bonus8k: on
    player_bonus{value%10>=9}:
        bonus9k: on
    player_bonus{value>=10 and value <20}:
        bonus10k: on
    player_bonus{value>=20}:
        bonus20k: on
    player_bonus{value>=30}:
        bonus10k: on       

    player_bonus_multiplier:
        bonusMult: off
    player_bonus_multiplier{value>=2}:
        bonus2x: on
    player_bonus_multiplier{value>=3}:
        bonus3x: on
    player_bonus_multiplier{value>=4}:
        bonus4x: on
    player_bonus_multiplier{value>=5}:
        bonus5x: on

#show_player:
#    player_superSpinner{value==1}:
#        flashing:
#            show_tokens:
#                lights: spinner
#            key: spinnerShow
#            action: play
#            priority: 100
#            speed: 5
#    player_superSpinner{value==0}:
#        spinnerShow: stop
#
#    ball_save_default_enabled:
#        flashing:
#            show_tokens:
#                lights: shootAgain
#            key: ballSaveShow
#            action: play
#            priority: 100
#            speed: 2
#    ball_save_default_disabled:
#        ballSaveShow: stop
#
#    drop_white{current_player.whiteDrops==1}:
#        flashing:
#            show_tokens:
#                lights: whiteDrops
#            key: whiteDropsShow
#            action: play
#            priority: 100
#            speed: 3
#            loops: 3
#    drop_yellow{current_player.advX==1}:
#        flashing:
#            show_tokens:
#                lights: advMultiplier
#            key: advMultiplierShow
#            action: play
#            priority: 100
#            speed: 3
#            loops: 3
#    #"{current_player.collecting==1 and device.ball_holds.eject.balls_held>0}":
#    scoreBonus:
#        flashing:
#            show_tokens:
#                lights: collectBonus
#            key: collectBonusShow
#            action: play
#            priority: 100
#            speed: 2
#    bonusDone:
#        collectBonusShow: stop
#
#
#    #"{current_player.special==1}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: special
#    #        action: play
#    #        key: specialShow
#    #"{current_player.leftEb==1}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: leftEb
#    #        action: play
#    #        key: leftEbShow
#    #"{current_player.rightEb==1}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: rightEb
#    #        action: play
#    #        key: rightEbShow
#
#    special_active{current_player.special>0}:
#        flashing:
#            show_tokens:
#                lights: special
#            action: play
#            key: specialFlash
#            speed: 3
#            loops: 5
#            priority: 100
#        knock:
#            action: play
#            key: specialKnock     
#            loops: 4   
#    leftEb_active{current_player.leftEb>0}:
#        flashing:
#            show_tokens:
#                lights: leftEb
#            action: play
#            speed: 3
#            loops: 5
#            priority: 100
#            key: leftEbShow
#        knock:
#            action: play
#            key: leftEbKnock     
#            loops: 2 
#    rightEb_active{current_player.rightEb>0}:
#        flashing:
#            show_tokens:
#                lights: rightEb
#            action: play
#            key: rightEbShow
#            speed: 3
#            loops: 5
#            priority: 100
#        knock:
#            action: play
#            key: rightEbKnock     
#            loops: 1
#
#    "{current_player.heldBonus%10==1 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus1k
#            action: play
#            key: bonusShow1
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==2 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus2k
#            action: play
#            key: bonusShow2
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==3 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus3k
#            action: play
#            key: bonusShow3
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==4 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus4k
#            action: play
#            key: bonusShow4
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==5 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus5k
#            action: play
#            key: bonusShow5
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==6 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus6k
#            action: play
#            key: bonusShow6
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==7 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus7k
#            action: play
#            key: bonusShow7
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==8 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus8k
#            action: play
#            key: bonusShow8
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus%10==9 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus9k
#            action: play
#            key: bonusShow9
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus>=10 and current_player.heldBonus<20}":
#        flashing:
#            show_tokens:
#                lights: bonus10k
#            action: play
#            key: bonusShow10
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonus>=20 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus20k
#            action: play
#            key: bonusShow20
#            priority: 100
#            sync_ms: 1000
#
#    "{current_player.heldBonusX==2 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus2x
#            action: play
#            key: bonus2xShow
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonusX==3 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus3x
#            action: play
#            key: bonus3xShow
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonusX==4 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus4x
#            action: play
#            key: bonus4xShow
#            priority: 100
#            sync_ms: 1000
#    "{current_player.heldBonusX==5 and current_player.collecting==0}":
#        flashing:
#            show_tokens:
#                lights: bonus5x
#            action: play
#            key: bonus5xShow
#            priority: 100
#            sync_ms: 1000
#
#    #"{current_player.heldBonus%10>=1 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<1)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus1k
#    #        action: play
#    #        key: bonusShow1
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=2 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<2)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus2k
#    #        action: play
#    #        key: bonusShow2
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=3 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<3)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus3k
#    #        action: play
#    #        key: bonusShow3
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=4 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<4)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus4k
#    #        action: play
#    #        key: bonusShow4
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=5 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<5)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus5k
#    #        action: play
#    #        key: bonusShow5
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=6 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<6)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus6k
#    #        action: play
#    #        key: bonusShow6
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=7 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<7)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus7k
#    #        action: play
#    #        key: bonusShow7
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=8 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<8)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus8k
#    #        action: play
#    #        key: bonusShow8
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus%10>=9 and (current_player.bonus%10>=current_player.heldBonus%10 or current_player.bonus%10<9)}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus9k
#    #        action: play  
#    #        key: bonusShow9
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus>=10 and current_player.heldBonus<20}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus10k
#    #        action: play  
#    #        key: bonusShow10
#    #        priority: 100
#    #        sync_ms: 1000
#    #"{current_player.heldBonus>=20}":
#    #    flashing:
#    #        show_tokens:
#    #            lights: bonus20k
#    #        action: play  
#    #        key: bonusShow20
#    #        priority: 100
#    #        sync_ms: 1000
#
#coil_player:
#    timer_score_tick{current_player.thousands>0}: thousands
#    timer_score_tick{current_player.thousands==0 and current_player.hundreds>0}: hundreds
#    timer_score_tick{current_player.thousands==0 and current_player.hundreds==0 and current_player.tens>0}: tens
#
#timers:
#    spinner:
#        start_value: 3
#        end_value: 0
#        direction: down
#        control_events:
#          - action: restart
#            event: inlane_active
#          - action: jump
#            value: 1
#            event: spinner_active
#    bonus:
#        start_value: 1
#        end_value: 0
#        direction: down
#        restart_on_complete: yes
#        tick_interval: .125*current_player.bonus_multiplier + .050
#        control_events:
#          - action: stop
#            event: bonusDone
#          - action: restart
#            event: startBonus
#          - action: restart
#            event: scoreBonus
#    score:
#        start_value: 1
#        end_value: 0
#        direction: down
#        restart_on_complete: yes
#        tick_interval: 125ms
#        control_events:
#          - action: stop
#            event: player_thousands{value==0 and current_player.hundreds==0 and current_player.tens==0}
#          - action: stop
#            event: player_hundreds{value==0 and current_player.thousands==0 and current_player.tens==0}
#          - action: stop
#            event: player_tens{value==0 and current_player.hundreds==0 and current_player.thousands==0}
#          - action: start
#            event: player_thousands{change>0 and prev_value==0}
#          - action: start
#            event: player_hundreds{change>0 and prev_value==0}
#          - action: start
#            event: player_tens{change>0 and prev_value==0}
#
#queue_relay_player:
#    ball_ending:
#        post: startBonus
#        wait_for: bonusDone
#
#accruals:
#    lane:
#        events:
#          - laneA_active
#          - laneB_active
#          - laneC_active
#          - laneD_active
#        events_when_complete: lanesComplete
#        reset_on_complete: yes
#        disable_on_complete: no
#        persist_state: yes